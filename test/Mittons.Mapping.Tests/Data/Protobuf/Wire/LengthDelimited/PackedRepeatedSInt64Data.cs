namespace Mittons.Mapping.Tests.Data.Protobuf.Wire.LengthDelimited;

internal class PackedRepeatedSInt64Data : DataSourceGeneratorAttribute<byte[], long[]>
{
    protected override IEnumerable<Func<(byte[], long[])>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)
    {
        foreach (var variation in CreateVariations([.. PackedRepeatedSInt32Data.PositiveData, .. PackedRepeatedSInt32Data.NegativeData]))
        {
            yield return () => variation;
        }

        foreach (var variation in CreateVariations([.. PositiveData, .. NegativeData]))
        {
            yield return () => variation;
        }
    }

    internal static IEnumerable<(byte[], long)> PositiveData
    {
        get =>
        [
            ([0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 17_179_869_184),
            ([0x82, 0x80, 0x80, 0x80, 0x80, 0x01], 17_179_869_185),
            ([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 2_199_023_255_552),
            ([0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 2_199_023_255_553),
            ([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 281_474_976_710_656),
            ([0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 281_474_976_710_657),
            ([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 36_028_797_018_963_968),
            ([0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 36_028_797_018_963_969),
            ([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 4_611_686_018_427_387_904),
            ([0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 4_611_686_018_427_387_905),
            ([0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03], long.MaxValue - 1),
            ([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03], long.MaxValue),
        ];
    }

    internal static IEnumerable<(byte[], long)> NegativeData
    {
        get =>
        [
            ([0xff, 0xff, 0xff, 0xff, 0x7f], -17_179_869_184),
            ([0x81, 0x80, 0x80, 0x80, 0x80, 0x01], -17_179_869_185),
            ([0xff, 0xff, 0xff, 0xff, 0xff, 0x7f], -2_199_023_255_552),
            ([0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], -2_199_023_255_553),
            ([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f], -281_474_976_710_656),
            ([0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], -281_474_976_710_657),
            ([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f], -36_028_797_018_963_968),
            ([0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], -36_028_797_018_963_969),
            ([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f], -4_611_686_018_427_387_904),
            ([0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], -4_611_686_018_427_387_905),
            ([0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03], long.MinValue + 1),
            ([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03], long.MinValue),
        ];
    }

    private static IEnumerable<(byte[] bytes, long[] value)> CreateVariations(IEnumerable<(byte[] bytes, long value)> source)
    {
        foreach (var (bytes, value) in source)
        {
            yield return (bytes, [value]);
        }

        foreach (var (bytes, value) in source.Reverse())
        {
            yield return (bytes, [value]);
        }

        yield return ([.. source.SelectMany(x => x.bytes)], [.. source.Select(x => x.value)]);
    }
}
